<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 随笔</title><link>http://yuguo.im/tags/python/</link><description>Recent content in Python on 随笔</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Aug 2019 18:46:44 +0800</lastBuildDate><atom:link href="http://yuguo.im/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Microsoft Visual C++ 14.0 is required</title><link>http://yuguo.im/post/2019/08/cpluspuls14-required/</link><pubDate>Mon, 26 Aug 2019 18:46:44 +0800</pubDate><guid>http://yuguo.im/post/2019/08/cpluspuls14-required/</guid><description>在Windows系统上安装某些需要编译的包时经常会遇到这个问题，经常使用的办法是找一个编译好的版本直接通过pip安装，但是找不到怎么办?
省时省力，第一优先级 Python Extension Packages for Windows: https://www.lfd.uci.edu/~gohlke/pythonlibs/
安装C编译环境 失败经历 先附上我的失败经历，希望直接看到成功的，直接下拉到最后。
1. 利用python包的错误提示信息 Microsoft Visual C++ 14.0 is required. Get it with &amp;quot;Microsoft Visual C++ Build Tools&amp;quot;: https://visualstudio.microsoft.com/downloads/ 这个网站把2015、2017版本给隐藏起来，找起来比较麻烦。 看这里所有的旧版本都在这: https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/ 2. python版本和对应的C++编译版本 https://wiki.python.org/moin/WindowsCompilers
Visual C++ CPython 14.X 3.5, 3.6, 3.7, 3.8 10.0 3.3, 3.4 9.0 2.6, 2.7, 3.0, 3.1, 3.2 3. 我把2019, 2017, 2015版本(均高于14.</description></item><item><title>Extracting MAC address using Python</title><link>http://yuguo.im/post/2019/extra-mac-address-using-python/</link><pubDate>Sat, 29 Jun 2019 15:11:07 +0800</pubDate><guid>http://yuguo.im/post/2019/extra-mac-address-using-python/</guid><description>使用 Python 来提取计算机的 MAC 地址。翻译来源: https://www.geeksforgeeks.org/extracting-mac-address-using-python/
MAC地址也称为物理地址，是分配给计算机网卡(NIC)的唯一标识符。NIC有助于将计算机与网络中的其他计算机连接。 MAC地址对于所有NIC都是唯一的。
MAC地址的用途：
在IP地址频繁更改的地方很有用。帮助网络管理员。获取有关网络流量的信息。 帮助我们配置哪些计算机可以连接到我们的计算机。通过这种方式我们可以过滤潜在的垃圾邮件/病毒攻击。 帮助从世界各地的其他计算机中唯一识别计算机。 Example MAC Address 00 16 2C 99 0B DB |______| |______| | | Vendor No Serial No 方法1：使用 uuid.getnode() getnode() 可用于提取计算机的MAC地址。该方法在uuid模块中定义。 下面给出的插图代码显示了如何使用uuid1（）函数为给定主机生成UUID，该UUID由其MAC地址标识。
代码: ## Python Program to compute ## MAC address of host ## using UUID module import uuid ## printing the value of unique MAC ## address using uuid and getnode() function print(hex(uuid.getnode())) 输出: 0x163e990bdb 缺点: 显而易见的缺点是“输出不是格式化的形式”。 方法2：使用getnode() + format()[为了更好的格式化形式] 代码: ## Python 3 code to print MAC ## in formatted way.</description></item><item><title>还在找U盘？别找了，我教你一招！</title><link>http://yuguo.im/post/2019/replace-flash-disk/</link><pubDate>Sat, 01 Jun 2019 23:22:26 +0800</pubDate><guid>http://yuguo.im/post/2019/replace-flash-disk/</guid><description>最近有同事问我，有没有U盘，她要给别人拷下文件，或者是从别人那拷贝下文件。
这些文件普遍有个特点就是体积大（超出微信客户端中的上限 100M）
办公室里这种小事时常发生，时间就在指缝间悄悄流逝。
作为一名 “懒人”，这种事要是发生在身上，我会这么解决：
准备工作 发送方和接收方在一个局域网内 发送方的 PC 上有 python 环境 开始我的表演 以 Win10 系统演示，其他系统方法类似
Step.1 发送方进入要传递文件的目录
Step.2 地址栏输入cmd
Step.3 输入指令ipconfig，获得ipv4地址，假设你获得的是192.168.1.10
Step.4 确认系统环境的python版本，不同版本输入不同的指令，请对号入座。
python2 python -m SimpleHTTPServer python3 python -m http.server Step.5 此时防火墙会有提示，选择允许访问
Step.6 接收方打开任意浏览器，输入http:192.168.1.10:8000，页面上立马会返回Step.1中看到的目录，此时就已经大功告成了。
新的旅程 技术的诞生是因为问题需要得到解决，然而解决问题的方案永远不止一种，此时应在特定的场景下寻求最优解，不局限某种方法，不固步自封，勇于尝试各种思路。从这周开始，每一周的周末，我都会和大家分享，日常工作生活学习中遇到的各种问题，以及我是怎么解决的，不求给大家多大的帮助，但求拓宽解决问题的思路。</description></item><item><title>Pip Install Pipenv Fail</title><link>http://yuguo.im/post/2018/05/pip-install-pipenv-fail/</link><pubDate>Mon, 21 May 2018 21:15:15 +0800</pubDate><guid>http://yuguo.im/post/2018/05/pip-install-pipenv-fail/</guid><description> 提示: &amp;lsquo;install_requires&amp;rsquo; must be a string or list of strings containing valid project/version requirement specifiers
解决方式(pipenv版本管理)
思路: 先装次新版本，再装最新版本
pip install pipenv==11.10.4 pip install pipenv</description></item><item><title>configparser(PY3) VS ConfigParser(PY2)</title><link>http://yuguo.im/post/2017/python-config/</link><pubDate>Wed, 26 Apr 2017 18:25:23 +0000</pubDate><guid>http://yuguo.im/post/2017/python-config/</guid><description>&lt;blockquote>
&lt;p>关于使用ConfigParser,我的小伙伴想实现特殊的需求: 1.配置中的参数均大写; 2.配置文件中&amp;quot;=&amp;ldquo;等号两侧无空格, 于是摸索中写下这篇文章, 方便有缘人&lt;/p>
&lt;/blockquote></description></item><item><title>WSGI，uwsgi和uWSGI的区别</title><link>http://yuguo.im/post/2017/wsgi-uwsgi/</link><pubDate>Tue, 25 Apr 2017 16:00:13 +0000</pubDate><guid>http://yuguo.im/post/2017/wsgi-uwsgi/</guid><description>WSGI Web服务器网关接口
WSGI(Python Web Server Gateway Interface, Web服务器网关接口)是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口
uwsgi uwsgi协议
uwsgi同WSGI一样是一种通信协议。uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。
uWSGI uWSGI
uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。
最流行的 uWSGI 服务器是 uwsgi</description></item><item><title>Python 中的 exit()、sys.exit() 和 os._exit()的区别</title><link>http://yuguo.im/post/2017/python-exit/</link><pubDate>Mon, 24 Apr 2017 11:21:54 +0000</pubDate><guid>http://yuguo.im/post/2017/python-exit/</guid><description>Python官方解释 exit() exit
Objects that when printed, print a message like “Use quit() or Ctrl-D (i.e. EOF) to exit”, and when called, raise SystemExit with the specified exit code.
简言之: 抛出 SystemExit 异常. 用于给交互式Shell退出.
sys.exit() sys.exit
Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.</description></item><item><title>关于Python中json库的一些整理</title><link>http://yuguo.im/post/2017/python-json/</link><pubDate>Wed, 19 Apr 2017 15:42:53 +0000</pubDate><guid>http://yuguo.im/post/2017/python-json/</guid><description>&lt;h3 id="jsondump和jsondumps的区别来自stackoverflow的释疑httpstackoverflowcomquestions36059194what-is-the-difference-between-json-dump-and-json-dumps-in-python">json.dump和json.dumps的区别(&lt;a href="http://stackoverflow.com/questions/36059194/what-is-the-difference-between-json-dump-and-json-dumps-in-python">来自Stackoverflow的释疑&lt;/a>)&lt;/h3>
&lt;ul>
&lt;li>json.dump&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Serialize &lt;code>obj&lt;/code> as a JSON formatted stream to &lt;code>fp&lt;/code> (a &lt;code>.write()&lt;/code>-supporting file-like object).
If &lt;code>ensure_ascii&lt;/code> is &lt;code>False&lt;/code>, some chunks written to &lt;code>fp&lt;/code> may be &lt;code>unicode&lt;/code> instances.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>json.dumps&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Serialize &lt;code>obj&lt;/code> to a JSON formatted &lt;code>str&lt;/code>.
If &lt;code>ensure_ascii&lt;/code> is &lt;code>False&lt;/code>, all non-ASCII characters are not escaped, and the return value may be a &lt;code>unicode&lt;/code> instance.&lt;/p>
&lt;/blockquote></description></item><item><title>Pycharm实现前进/后退</title><link>http://yuguo.im/post/2017/pycharm-jump/</link><pubDate>Wed, 19 Apr 2017 14:37:44 +0000</pubDate><guid>http://yuguo.im/post/2017/pycharm-jump/</guid><description>&lt;blockquote>
&lt;p>操作系统: Ubuntu14.04; Pycharm版本: 2016.3; 这里的前进指的是追踪函数源码, 后退是前进的反方向。&lt;/p>
&lt;/blockquote></description></item><item><title>玩的就是“心跳”</title><link>http://yuguo.im/post/2017/heartbeat/</link><pubDate>Tue, 18 Apr 2017 09:49:26 +0000</pubDate><guid>http://yuguo.im/post/2017/heartbeat/</guid><description>&lt;h3 id="心跳检测是什么">心跳检测是什么？&lt;/h3>
&lt;p>这里的“心跳”，可不是男女之间心动啥的“砰砰砰”。&lt;/p>
&lt;ul>
&lt;li>心跳检测是判断对方(设备，进程或其它网元)是否正常进行，一般采用定时发送简单的通讯包，如果长时间未收到对方响应，则判断对方已经挂掉。&lt;/li>
&lt;li>&lt;a href="http://www.baike.com/wiki/%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6">心跳机制&lt;/a>是服务端和客户端检测对方是否在线的一种方式。&lt;/li>
&lt;li>心跳包就是客户端定时发送简单的信息给服务端告诉它我还在，服务端视情况而定给客户单返回合适信息，一般情况下是客户端给服务端发心跳包。&lt;/li>
&lt;/ul></description></item><item><title>Python中字符串格式化符号和转义字符含义</title><link>http://yuguo.im/post/2017/python-format/</link><pubDate>Wed, 12 Apr 2017 15:36:26 +0000</pubDate><guid>http://yuguo.im/post/2017/python-format/</guid><description>&lt;blockquote>
&lt;p>这篇文档整理自&lt;a href="http://bbs.fishc.com/forum.php?mod=viewthread&amp;amp;tid=39140&amp;amp;extra=page%3D1%26filter%3Dtypeid%26typeid%3D403">鱼C论坛&lt;/a>, 感谢作者输出,我只是一枚搬运工&amp;hellip;&lt;/p>
&lt;/blockquote></description></item><item><title>第三方登录</title><link>http://yuguo.im/post/2017/oauth2/</link><pubDate>Tue, 11 Apr 2017 23:22:44 +0000</pubDate><guid>http://yuguo.im/post/2017/oauth2/</guid><description>&lt;blockquote>
&lt;p>这篇文档的源自一个第三方登录的需求,于是我就想搞清楚怎么实现第三方登录的,网上有现成的解决方案: &lt;a href="http://dev.umeng.com/social/android/login-page">友盟&lt;/a>和&lt;a href="http://wiki.mob.com/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/">ShareSDK&lt;/a>;但是这不是我最需要,于是就有了下面的的记录:&lt;/p>
&lt;/blockquote></description></item><item><title>Python和Excel的不解之缘</title><link>http://yuguo.im/post/2017/python-excel/</link><pubDate>Mon, 10 Apr 2017 18:48:49 +0000</pubDate><guid>http://yuguo.im/post/2017/python-excel/</guid><description>&lt;h2 id="表格处理模块">表格处理模块&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://xlwt.readthedocs.io/en/latest/">xlwt (writing xls files)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://xlrd.readthedocs.io/en/latest/">xlrd (reading xls/xlsx files)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openpyxl.readthedocs.io/en/default/">openpyxl (reading/writing xlsx files)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://xlsxwriter.readthedocs.io">xlsxwriter (writing xlsx files)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.python-excel.org/">more details&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Python3正则表达式特殊符号及用法(详细列表)</title><link>http://yuguo.im/post/2015/regex/</link><pubDate>Sat, 26 Sep 2015 08:45:41 +0000</pubDate><guid>http://yuguo.im/post/2015/regex/</guid><description>这篇文档整理自鱼C论坛, 感谢作者输出,我只是一枚搬运工&amp;hellip;
正则表达式的强大之处在于特殊符号的应用,特殊符号定义了字符集合、子组匹配、模式重复次数。正是这些特性符号使得一个正则表达式可以匹配字符串集合而不只是一个字符串。
注1: 为了便于理解，难点的地方均用斜体举了栗子。
字符 含义 . 表示匹配除了换行符外的任何字符 注: 通过设置re.DOTALL标志可以使.匹配任何字符(包括换行符) ¦(竖杠) A¦(竖杠)B,表示匹配正则表达式A或者B ^ 1.(脱字符)匹配输入字符串的开始位置 2.如果设置了re.MULTILINE标志,^也匹配换行符之后的位置 $ 1.匹配输入字符串的结束位置2.如果设置了re.MULTILINE标志,$也匹配换行符之前的位置 \ 1.将一个普通字符变成特殊字符，例如 \d 表示匹配所有十进制数字2. 解除元字符的特殊功能，例如 \. 表示匹配点号本身3. 引用序号对应的子组所匹配的字符串4. 详见下方列举 [&amp;hellip;] 字符类，匹配所包含的任意一个字符注1：连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符注2：特殊字符仅有反斜线 \ 保持特殊含义，用于转义字符。其它特殊字符如 *、+、? 等均作为普通字符匹配 注3：脱字符 ^ 如果出现在首位则表示匹配不包含其中的任意字符；如果 ^ 出现在字符串中间就仅作为普通字符匹配 {M,N} M 和 N 均为非负整数，其中 M &amp;lt;= N，表示前边的 RE 匹配 M ~ N 次注1：{M,} 表示至少匹配 M 次注2：{,N} 等价于 {0,N}注3：{N} 表示需要匹配 N 次 * 匹配前面的子表达式零次或多次，等价于 {0,} + 匹配前面的子表达式一次或多次，等价于 {1,} ?</description></item></channel></rss>