<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mysql on 随笔</title><link>https://xiayuguo.github.io/tags/mysql/</link><description>Recent content in Mysql on 随笔</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Jul 2019 19:02:58 +0800</lastBuildDate><atom:link href="https://xiayuguo.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>Change Mysql Password</title><link>https://xiayuguo.github.io/post/2019/07/change-mysql-password/</link><pubDate>Wed, 17 Jul 2019 19:02:58 +0800</pubDate><guid>https://xiayuguo.github.io/post/2019/07/change-mysql-password/</guid><description>去年的这个夏天，不像今年雨水很多，天气微热，朋友打电话过来说: “他的数据库被人黑了，对方扬言必须给某某账号下转xxx比特币，不然就删库”。修改数据库密码有三种常见方式：mysqladmin和sql。
修改数据库密码前，我们先来看下数据库里存储的用户和密码信息，此处示例中我使用的密码是666, 要修改为999。
mysql&amp;gt; select host,user,password from mysql.user where user=&amp;quot;root&amp;quot;; +-----------+------+-------------------------------------------+ | host | user | password | +-----------+------+-------------------------------------------+ | localhost | root | *007D50CA06F69776D307B1BEC71CD73D0EA0999C | | hugo | root | *007D50CA06F69776D307B1BEC71CD73D0EA0999C | | 127.0.0.1 | root | *007D50CA06F69776D307B1BEC71CD73D0EA0999C | | ::1 | root | *007D50CA06F69776D307B1BEC71CD73D0EA0999C | | % | root | *007D50CA06F69776D307B1BEC71CD73D0EA0999C | +-----------+------+-------------------------------------------+ 5 rows in set (0.00 sec) 方式一 mysqladmin -uroot -p666 flush-privileges password &amp;quot;999&amp;quot; 可以通过下面的方式来验证：</description></item><item><title>Export Mysql Table to Excel</title><link>https://xiayuguo.github.io/post/2019/07/export-mysql-table-to-excel/</link><pubDate>Mon, 01 Jul 2019 12:13:24 +0800</pubDate><guid>https://xiayuguo.github.io/post/2019/07/export-mysql-table-to-excel/</guid><description>今天有同事问我怎么把Mysql某个表中的数据导出到Excel中？本以为so easy的事，结果踩了很多坑，记录下。
方法一: 使用MySQL Workbench导出CSV MySQL Workbench 这个客户端软件是我一直使用的一款 MySQL 客户端, 超级强大。自然也少不了导入和导出的功能。具体导出的步骤请移步至官方文档(图文并茂, 美滴很)
在准备享受胜利果实的时候，使用Excel打开导出的CSV文件，我去，中文全都是乱码，怎么办呢？
甭捉急，两步搞定乱码问题:
使用记事本打开上述的CSV文件 文件 =&amp;gt; 另存为 =&amp;gt; 选中编码为ANSI =&amp;gt; 最后覆盖原文件，就好了 方法二: 使用原生SQL导出CSV 万变不离其宗，SQL 是一种更加原始粗暴的方案，但是更加实用，即使再花哨的工具，最后归根结底还是会回到这个位置。
语法 SELECT * FROM 表名 INTO OUTFILE '输出的文件位置' FIELDS TERMINATED BY '字段分隔符(,)' ENCLOSED BY '字段包围符(&amp;quot;)' LINES TERMINATED BY '行间分隔符(\n)'; 理想很丰满，现实很骨感。有了语法，执行时又遇到问题了。
问题一: secure-file-priv选项问题 ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement 使用的MySQL版本5.</description></item><item><title>Mysql M2B in Action with Docker</title><link>https://xiayuguo.github.io/post/2019/mysql-m2b-in-action/</link><pubDate>Fri, 11 Jan 2019 18:05:10 +0800</pubDate><guid>https://xiayuguo.github.io/post/2019/mysql-m2b-in-action/</guid><description>M2B: 主主备份(DIY, 哈哈)。最近和数据库备份杠上了，碍于手上没有足够的服务器，于是在一个服务器上使用 Docker 运行两个 Mysql 实例, 下面是主主备份的具体流程, 每一步都不能跳过，请仔细阅读。
1. 运行两个 mysql 实例: mysql-1 和 mysql-2 确保两台服务器上有相同的数据。
root@cloud:~# docker run -p 10028:3306 --name mysql-1 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 root@cloud:~# docker run -p 10029:3306 --name mysql-2 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 2. 两个实例分别修改配置文件和创建复制账号 启用二进制日志，选择唯一的服务器ID，并创建复制账号
# mysql-1 # 进入实例 mysql-1 root@cloud:~# docker exec -it mysql-1 bash # 修改配置文件 my.cnf root@343cef5a6f96:/# vim /etc/mysql/my.cnf [mysqld] server-id = 128 log_bin = mysql-bin relay-log = mysql-relay-bin # replicate-wild-do-table=scheme.</description></item><item><title>Cannot open shared object file: Permission denied</title><link>https://xiayuguo.github.io/post/2019/docker-run-mysql-error/</link><pubDate>Wed, 09 Jan 2019 20:42:10 +0800</pubDate><guid>https://xiayuguo.github.io/post/2019/docker-run-mysql-error/</guid><description>我想通过 docker 来运行 mysql 实例, 网上教程一大堆，结果以为很简单的事，搞了大半天, 记录下来，希望能帮到大家。
环境 Ubuntu 14.04 Docker 18.09 Mysql 5.7 问题 root@cloud:~# docker run --name mysql -d -e MYSQL_ROOT_PASSWORD=12345 mysql:5.7 11637add4a41b827a9691fe6e77fba13ae63319d74713c64ef2e92276df6583f root@cloud:~# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES root@cloud:~# docker logs mysql ERROR: mysqld failed while attempting to check config command was: &amp;quot;mysqld --verbose --help --log-bin-index=/tmp/tmp.m22w4ZgLhP&amp;quot; mysqld: error while loading shared libraries: libpthread.so.0: cannot open shared object file: Permission denied 解决方案 解决过程中, 尝试各种以 权限 为中心的解决办法，均无效，有的网站上把 /usr/bin 的权限放开后就可以了，但是本人尝试无效。大家也可以试试。</description></item><item><title>MySQL的limit用法和分页查询的性能优化</title><link>https://xiayuguo.github.io/post/2017/mysql-limit/</link><pubDate>Thu, 27 Apr 2017 15:16:27 +0000</pubDate><guid>https://xiayuguo.github.io/post/2017/mysql-limit/</guid><description>学习任何东西都可以按照3W的框架进行，容器技术也是一样，先回答 What、Why 和 How 这三个问题。
CloudMan-每天5分钟玩转容器技术（6）
我非常赞同CloudMan的观点, 下面咱就以这三个问题来讨论今天的主题
What-Mysql中的LIMIT是干啥的? 在我们使用查询语句的时候，经常要返回前几条或者中间某几行数据，这个时候怎么办呢？不用担心，mysql已经为我们提供了这样一个功能。
SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。如果给定一个参数(rows), 偏移量offset默认为0, 指定返回[:rows]的数据; 如果给定两个参数(offset, rows)，offset指定第一个返回记录行的偏移量，rows指定返回记录行的最大数目。
mysql&amp;gt; SELECT * FROM table LIMIT 5,10; // 检索记录行 6-15 获得开头的几行数据
mysql&amp;gt; SELECT * FROM table LIMIT 10; // 检索记录行 0-9 获得结尾的几行数据
mysql&amp;gt; SELECT * FROM table LIMIT 100,-1; // 检索记录行 100-last. Why-为什么需要为分页查询做优化? 随着数据量的增加，页数会越来越多，查看后几页的SQL就可能类似下面示例。总而言之，越往后分页，LIMIT语句的偏移量(offset)就会越大，速度也会明显变 随着业务的复杂度越来越高, 查询条件不断增多, 可想而知, 速度也会越来越慢 SELECT * FROM users WHERE age = 12 ORDER BY id LIMIT 10000, 20 How-分页查询如何优化?</description></item><item><title>mysql</title><link>https://xiayuguo.github.io/post/2017/mysql/</link><pubDate>Fri, 31 Mar 2017 23:36:41 +0000</pubDate><guid>https://xiayuguo.github.io/post/2017/mysql/</guid><description>&lt;h2 id="初涉mysql">初涉Mysql&lt;/h2>
&lt;h3 id="mysql概述">MySQL概述&lt;/h3>
&lt;ul>
&lt;li>MySQL由瑞典MySQL AB公司开发，目前属于Oracle公司.&lt;/li>
&lt;li>MySQL是一个开源的关系型数据库管理系统.&lt;/li>
&lt;li>MySQL分为社区版和企业版.&lt;/li>
&lt;/ul></description></item></channel></rss>